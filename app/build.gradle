import java.security.MessageDigest

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "net.granoeste.example.halloandroid"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 4
        versionName "0.0.11"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}


// ビルドツールのパスを取得
def getBuildToolsPath() {
    return getSdkPath() + "/build-tools/${project.android.buildToolsRevision}"
}

// AndroidSdkのパスを取得
def getSdkPath() {
    def sdkDir
    // AndroidSdkのパスをlocal.propertiesから取得
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        sdkDir = properties.getProperty('sdk.dir')
    } else {
        sdkDir = System.env.ANDROID_HOME
    }
    return sdkDir
}

// 署名チェック
def verifySignature(String path) {
    def commandExe
    // Windowsの場合はbatファイルで実行する
//    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//        commandExe = getBuildToolsPath() + "/apksigner.bat"
//    } else {
    commandExe = getBuildToolsPath() + "/apksigner"
//    }
    println "verifySignature:${commandExe},${path}"

    return "${commandExe} verify --print-certs ${path}".execute().text
}

// 証明書フィンガプリントチェック
def verifyFingerprint(String path) {
    return "keytool -list -printcert -jarfile  ${path}".execute().text
}

def digest(final file, String algorithm) {
    MessageDigest digest = MessageDigest.getInstance(algorithm)
    file.withInputStream() { is ->
        byte[] buffer = new byte[8192]
        int read = 0
        while ((read = is.read(buffer)) > 0) {
            digest.update(buffer, 0, read)
        }
    }
    byte[] result = digest.digest()
    BigInteger bigInt = new BigInteger(1, result)

    return bigInt.toString(16).padLeft(32, '0')
}

task verifyApk {
    description = "APKの検査"

    doLast {
        println "buildDir: ${buildDir}"

        def files = []
        buildDir.eachFileRecurse(groovy.io.FileType.FILES) {
            if (it.name.endsWith('.apk')) {
                files << it
            }
        }
        files.each { File file ->
            println "============================================================"
            println "Target APK: ${file}"
            println "============================================================"
            println "Verify"
            println "------------------------------------------------------------"
            def md5 = digest(file, "MD5")
            def sha1 = digest(file, "SHA1")
            println "MD5 :${md5}"
            println "SHA1:${sha1}"
            new File(file.getParentFile(), file.getName() + ".md5").write(md5)
            new File(file.getParentFile(), file.getName() + ".sha1").write(sha1)
            def apksigner = verifySignature(file.getAbsolutePath())
            new File(file.getParentFile(), file.getName() + ".apksigner").write(apksigner)
            def cert = verifyFingerprint(file.getAbsolutePath())
            new File(file.getParentFile(), file.getName() + ".cert").write(cert)
        }
    }
}
